Here's the failing test:
    #test the command_n function empty stack
    def test_command_n_domain_incorrect(self):
        #create a calculator
        calc = minidc()
        #redirect stderr to something we can read
        stderr_temp = sys.stdout
        out = StringIO.StringIO()
        sys.stderr = out

        try:
            #run the divide command (with only 1 value)
            calc.command_n()
            #get the value printed
            printed = out.getvalue()
        finally:
            #restore stdout
            sys.stderr = stderr_temp
        self.assertEqual(printed, 'Error: empty stack\n')
Here's the test failing:
    test_add_domain_correct (__main__.test_minidc) ... ok
    test_add_domain_incorrect (__main__.test_minidc) ... ok
    test_command_f_domain_correct (__main__.test_minidc) ... ok
    test_command_n_domain_correct (__main__.test_minidc) ... ok
    test_command_n_domain_incorrect (__main__.test_minidc) ... ERROR
    test_command_p_domain_correct (__main__.test_minidc) ... ok
    test_command_p_domain_incorrect (__main__.test_minidc) ... ok
    test_divide_domain_correct (__main__.test_minidc) ... ok
    test_divide_domain_incorrect_1 (__main__.test_minidc) ... ok
    test_divide_domain_incorrect_2 (__main__.test_minidc) ... ok
    test_execute_line_domain_correct_1 (__main__.test_minidc) ... ok
    test_execute_line_domain_correct_2 (__main__.test_minidc) ... ok
    test_multiply_domain_correct (__main__.test_minidc) ... ok
    test_multiply_domain_incorrect (__main__.test_minidc) ... ok
    test_push_number_domain_correct (__main__.test_minidc) ... ok
    test_subtract_domain_correct (__main__.test_minidc) ... ok
    test_subtract_domain_incorrect (__main__.test_minidc) ... ok
    ======================================================================
    ERROR: test_command_n_domain_incorrect (__main__.test_minidc)
    ----------------------------------------------------------------------
    Traceback (most recent call last):
      File "V:/softengprac/test_minidc.py", line 326, in test_command_n_domain_incorrect
        calc.command_n()
      File "V:\softengprac\minidc.py", line 88, in command_n
        print '{0:g}'.format(float(self.nums.pop()))
    IndexError: pop from empty list
    ----------------------------------------------------------------------
    Ran 17 tests in 0.006s
    FAILED (errors=1)
    Process finished with exit code 0
Here's the code that passes the test:
    #pops the top number off the stack and prints it out, stripping trailing zeroes
    def command_n(self):
        if len(self.nums) == 0:
            sys.stderr.write('Error: empty stack\n')
            return
        print '{0:g}'.format(float(self.nums.pop()))
Here's the test passing:
    test_add_domain_correct (__main__.test_minidc) ... ok
    test_add_domain_incorrect (__main__.test_minidc) ... ok
    test_command_f_domain_correct (__main__.test_minidc) ... ok
    test_command_n_domain_correct (__main__.test_minidc) ... ok
    test_command_n_domain_incorrect (__main__.test_minidc) ... ok
    test_command_p_domain_correct (__main__.test_minidc) ... ok
    test_command_p_domain_incorrect (__main__.test_minidc) ... ok
    test_divide_domain_correct (__main__.test_minidc) ... ok
    test_divide_domain_incorrect_1 (__main__.test_minidc) ... ok
    test_divide_domain_incorrect_2 (__main__.test_minidc) ... ok
    test_execute_line_domain_correct_1 (__main__.test_minidc) ... ok
    test_execute_line_domain_correct_2 (__main__.test_minidc) ... ok
    test_multiply_domain_correct (__main__.test_minidc) ... ok
    test_multiply_domain_incorrect (__main__.test_minidc) ... ok
    test_push_number_domain_correct (__main__.test_minidc) ... ok
    test_subtract_domain_correct (__main__.test_minidc) ... ok
    test_subtract_domain_incorrect (__main__.test_minidc) ... ok
    ----------------------------------------------------------------------
    Ran 17 tests in 0.001s
    OK
    Process finished with exit code 0