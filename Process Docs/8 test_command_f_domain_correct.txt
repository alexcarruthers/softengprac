Here’s the failing test:
    #test the f command with valid domain logic
    def test_command_f_domain_correct(self):
        #create a calculator
        calc = minidc()
        #push a bunch of numbers onto the stack
        calc.push_number(10)
        calc.push_number(5)
        calc.push_number(3)
        #redirect stdout to something we can read
        stdout_temp = sys.stdout
        out = StringIO.StringIO()
        sys.stdout = out
        try:
            #run the f command
            calc.command_f()
            #get the value printed
            printed = out.getvalue()
        finally:
            #restore stdout
            sys.stdout = stdout_temp
        #assert that the stack length hasn't changed
        self.assertEqual(len(calc.nums), 3)
        #assert that the values printed are the values pushed
        self.assertEqual(printed, "3 5 10 \n")
Here’s the test failing:
    test_add_domain_correct (test_minidc.test_minidc) ... ok
    test_command_f_domain_correct (test_minidc.test_minidc) ... FAIL
    test_command_n_domain_correct (test_minidc.test_minidc) ... ok
    test_command_p_domain_correct (test_minidc.test_minidc) ... ok
    test_divide_domain_correct (test_minidc.test_minidc) ... ok
    test_multiply_domain_correct (test_minidc.test_minidc) ... ok
    test_push_number_domain_correct (test_minidc.test_minidc) ... ok
    test_subtract_domain_correct (test_minidc.test_minidc) ... ok
    =================================================================
    FAIL: test_command_f_domain_correct (test_minidc.test_minidc)
    -----------------------------------------------------------------
    Traceback (most recent call last):
      File "V:/softengprac/test_minidc.py", line 151, in test_command_f_domain_correct
        self.assertEqual(printed, "3 5 10\n")
    AssertionError: '' != '3 5 10 \n'
    -----------------------------------------------------------------
    Ran 8 tests in 0.003s
    FAILED (failures=1)
    Process finished with exit code 0
Here’s the code that passes the test:
    #prints the entire stack without altering it, stripping trailing zeroes
    def command_f(self):
        for num in reversed(self.nums):
            sys.stdout.write('{0:g}'.format(float(num)) + ' ')
        sys.stdout.write('\n')
Here’s the test passing:
    test_add_domain_correct (test_minidc.test_minidc) ... ok
    test_command_f_domain_correct (test_minidc.test_minidc) ... ok
    test_command_n_domain_correct (test_minidc.test_minidc) ... ok
    test_command_p_domain_correct (test_minidc.test_minidc) ... ok
    test_divide_domain_correct (test_minidc.test_minidc) ... ok
    test_multiply_domain_correct (test_minidc.test_minidc) ... ok
    test_push_number_domain_correct (test_minidc.test_minidc) ... ok
    test_subtract_domain_correct (test_minidc.test_minidc) ... ok
    -----------------------------------------------------------------
    Ran 8 tests in 0.001s
    OK
    Process finished with exit code 0
