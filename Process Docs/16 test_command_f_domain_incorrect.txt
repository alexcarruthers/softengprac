Here's the failing test:
    #test the command_f function empty stack
    def test_command_f_domain_incorrect(self):
        #create a calculator
        calc = minidc()
        #redirect stderr to something we can read
        stderr_temp = sys.stdout
        out = StringIO.StringIO()
        sys.stderr = out

        try:
            #run the divide command (with only 1 value)
            calc.command_f()
            #get the value printed
            printed = out.getvalue()
        finally:
            #restore stdout
            sys.stderr = stderr_temp
        self.assertEqual(printed, 'Error: empty stack\n')
Here's the test failing:
    test_add_domain_correct (__main__.test_minidc) ... ok
    test_add_domain_incorrect (__main__.test_minidc) ... ok
    test_command_f_domain_correct (__main__.test_minidc) ... ok
    test_command_f_domain_incorrect (__main__.test_minidc) ... FAIL
    test_command_n_domain_correct (__main__.test_minidc) ... ok
    test_command_n_domain_incorrect (__main__.test_minidc) ... ok
    test_command_p_domain_correct (__main__.test_minidc) ... ok
    test_command_p_domain_incorrect (__main__.test_minidc) ... ok
    test_divide_domain_correct (__main__.test_minidc) ... ok
    test_divide_domain_incorrect_1 (__main__.test_minidc) ... ok
    test_divide_domain_incorrect_2 (__main__.test_minidc) ... ok
    test_multiply_domain_correct (__main__.test_minidc) ... ok
    test_multiply_domain_incorrect (__main__.test_minidc) ... ok
    test_push_number_domain_correct (__main__.test_minidc) ... ok
    test_subtract_domain_correct (__main__.test_minidc) ... ok
    test_subtract_domain_incorrect (__main__.test_minidc) ... ok
    ======================================================================
    FAIL: test_command_f_domain_incorrect (__main__.test_minidc)
    ----------------------------------------------------------------------
    Traceback (most recent call last):
      File "V:/softengprac/test_minidc.py", line 351, in test_command_f_domain_incorrect
        self.assertEqual(printed, 'Error: empty stack\n')
    AssertionError: '' != 'Error: empty stack\n'
    ----------------------------------------------------------------------
    Ran 16 tests in 0.004s
    FAILED (failures=1)
    Process finished with exit code 0
Here's the code that passes the test:
    #prints the entire stack without altering it, stripping trailing zeroes
    def command_f(self):
        if len(self.nums) == 0:
            sys.stderr.write('Error: empty stack\n')
            return
        for num in reversed(self.nums):
            sys.stdout.write('{0:g}'.format(float(num)) + ' ')
        sys.stdout.write('\n')
Here's the test passing:
    test_add_domain_correct (__main__.test_minidc) ... ok
    test_add_domain_incorrect (__main__.test_minidc) ... ok
    test_command_f_domain_correct (__main__.test_minidc) ... ok
    test_command_f_domain_incorrect (__main__.test_minidc) ... ok
    test_command_n_domain_correct (__main__.test_minidc) ... ok
    test_command_n_domain_incorrect (__main__.test_minidc) ... ok
    test_command_p_domain_correct (__main__.test_minidc) ... ok
    test_command_p_domain_incorrect (__main__.test_minidc) ... ok
    test_divide_domain_correct (__main__.test_minidc) ... ok
    test_divide_domain_incorrect_1 (__main__.test_minidc) ... ok
    test_divide_domain_incorrect_2 (__main__.test_minidc) ... ok
    test_multiply_domain_correct (__main__.test_minidc) ... ok
    test_multiply_domain_incorrect (__main__.test_minidc) ... ok
    test_push_number_domain_correct (__main__.test_minidc) ... ok
    test_subtract_domain_correct (__main__.test_minidc) ... ok
    test_subtract_domain_incorrect (__main__.test_minidc) ... ok
    ----------------------------------------------------------------------
    Ran 16 tests in 0.002s
    OK
    Process finished with exit code 0