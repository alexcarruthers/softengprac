Here's the failing test:
    #test the execute_line command with valid domain logic
    #numbers, negative numbers and arithmetic operations
    def test_execute_line_domain_correct_1(self):
        #create a calculator
        calc = minidc()
        #execute a line
        calc.execute_line('_5 3 4 6 1 + * - /')
        #check to make sure there is only one number on the stack
        self.assertEqual(len(calc.nums), 1)
        #check to make sure the value is 0.2
        self.assertEqual(calc.nums.pop(), 0.2)

Here's the test failing:
    test_add_domain_correct (__main__.test_minidc) ... ok
    test_command_f_domain_correct (__main__.test_minidc) ... ok
    test_command_n_domain_correct (__main__.test_minidc) ... ok
    test_command_p_domain_correct (__main__.test_minidc) ... ok
    test_divide_domain_correct (__main__.test_minidc) ... ok
    test_execute_line_domain_correct_1 (__main__.test_minidc) ... ERROR
    test_multiply_domain_correct (__main__.test_minidc) ... ok
    test_push_number_domain_correct (__main__.test_minidc) ... ok
    test_subtract_domain_correct (__main__.test_minidc) ... ok
    ======================================================================
    ERROR: test_execute_line_domain_correct_1 (__main__.test_minidc)
    ----------------------------------------------------------------------
    Traceback (most recent call last):
      File "V:/softengprac/test_minidc.py", line 159, in test_execute_line_domain_correct_1
        calc.execute_line('_5 3 4 6 1 + * - /')
      File "V:\softengprac\minidc.py", line 95, in execute_line
        self.divide()
      File "V:\softengprac\minidc.py", line 55, in divide
        num2 = self.nums.pop()
    IndexError: pop from empty list
    ----------------------------------------------------------------------
    Ran 9 tests in 0.007s
    FAILED (errors=1)
    Process finished with exit code 0
Here's the code that passes the test:
    #takes a line of commands and executes them
    def execute_line(self, line):
        #small function to check if a string is a number (int or float)
        def is_number(s):
            try:
                float(s)
            except ValueError:
                return False
            return True
        line = line.split(' ')
        for i in line:
            if i == '+':
                self.add()
            elif i == '-':
                self.subtract()
            elif i == '*':
                self.multiply()
            elif i == '/':
                self.divide()
            elif is_number(i):
                self.push_number(float(i))
            elif i[0] == '_' and is_number(i[1:]):
                self.push_number(float('-' + i[1:]))
Here's the code passing the test:
    test_add_domain_correct (test_minidc.test_minidc) ... ok
    test_command_f_domain_correct (test_minidc.test_minidc) ... ok
    test_command_n_domain_correct (test_minidc.test_minidc) ... ok
    test_command_p_domain_correct (test_minidc.test_minidc) ... ok
    test_divide_domain_correct (test_minidc.test_minidc) ... ok
    test_execute_line_domain_correct_1 (test_minidc.test_minidc) ... ok
    test_multiply_domain_correct (test_minidc.test_minidc) ... ok
    test_push_number_domain_correct (test_minidc.test_minidc) ... ok
    test_subtract_domain_correct (test_minidc.test_minidc) ... ok
    ----------------------------------------------------------------------
    Ran 9 tests in 0.000s
    OK
    Process finished with exit code 0

