Here's the failing test:
    #test the execute_line command with valid input logic
    #numbers, decimal numbers and arithmetic operations
    def test_execute_line_input_correct_1(self):
        #create a calculator
        calc = minidc()
        #execute a line
        calc.execute_line('5.2 3+4 6 .5*-/')
        #check to make sure there is only one number on the stack
        self.assertEqual(len(calc.nums), 1)
        #check to make sure the value is 8.2
        self.assertEqual(calc.nums.pop(), 8.2)
Here's the test failing:
	test_add_domain_correct (__main__.test_minidc) ... ok
	test_add_domain_incorrect (__main__.test_minidc) ... ok
	test_command_f_domain_correct (__main__.test_minidc) ... ok
	test_command_f_domain_incorrect (__main__.test_minidc) ... ok
	test_command_n_domain_correct (__main__.test_minidc) ... ok
	test_command_n_domain_incorrect (__main__.test_minidc) ... ok
	test_command_p_domain_correct (__main__.test_minidc) ... ok
	test_command_p_domain_incorrect (__main__.test_minidc) ... ok
	test_divide_domain_correct (__main__.test_minidc) ... ok
	test_divide_domain_incorrect_1 (__main__.test_minidc) ... ok
	test_divide_domain_incorrect_2 (__main__.test_minidc) ... ok
	test_execute_line_input_correct_1 (__main__.test_minidc) ... FAIL
	test_multiply_domain_correct (__main__.test_minidc) ... ok
	test_multiply_domain_incorrect (__main__.test_minidc) ... ok
	test_push_number_domain_correct (__main__.test_minidc) ... ok
	test_subtract_domain_correct (__main__.test_minidc) ... ok
	test_subtract_domain_incorrect (__main__.test_minidc) ... ok
	======================================================================
	FAIL: test_execute_line_input_correct_1 (__main__.test_minidc)
	----------------------------------------------------------------------
	Traceback (most recent call last):
	  File "/home/alex/Programming/softengprac/test_minidc.py", line 329, in test_execute_line_input_correct_1
	    self.assertEqual(len(calc.nums), 1)
	AssertionError: 0 != 1
	----------------------------------------------------------------------
	Ran 17 tests in 0.002s
	FAILED (failures=1)
Here's the code that passes the test:
	# take a line of commands and execute them
    def execute_line(self, line):
        #small function to check if a string is a number (int or float)
        def is_number(s):
            try:
                float(s)
            except ValueError:
                return False
            return True
        #split the line based on the expressions that constitute numbers and commands
        splitline = filter(lambda x: x.strip(), re.split("(\s|\+|\-|\*|/|\d*\.?\d+)", line))
        for i in splitline:
            if i == '+':
                self.add()
            elif i == '-':
                self.subtract()
            elif i == '*':
                self.multiply()
            elif i == '/':
                self.divide()
            elif is_number(i):
                self.push_number(float(i))

Here's the test passing:
	test_add_domain_correct (__main__.test_minidc) ... ok
	test_add_domain_incorrect (__main__.test_minidc) ... ok
	test_command_f_domain_correct (__main__.test_minidc) ... ok
	test_command_f_domain_incorrect (__main__.test_minidc) ... ok
	test_command_n_domain_correct (__main__.test_minidc) ... ok
	test_command_n_domain_incorrect (__main__.test_minidc) ... ok
	test_command_p_domain_correct (__main__.test_minidc) ... ok
	test_command_p_domain_incorrect (__main__.test_minidc) ... ok
	test_divide_domain_correct (__main__.test_minidc) ... ok
	test_divide_domain_incorrect_1 (__main__.test_minidc) ... ok
	test_divide_domain_incorrect_2 (__main__.test_minidc) ... ok
	test_execute_line_input_correct_1 (__main__.test_minidc) ... ok
	test_multiply_domain_correct (__main__.test_minidc) ... ok
	test_multiply_domain_incorrect (__main__.test_minidc) ... ok
	test_push_number_domain_correct (__main__.test_minidc) ... ok
	test_subtract_domain_correct (__main__.test_minidc) ... ok
	test_subtract_domain_incorrect (__main__.test_minidc) ... ok
	----------------------------------------------------------------------
	Ran 17 tests in 0.002s
	OK