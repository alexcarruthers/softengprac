Here’s the original failing test:
    #test the p command with valid domain logic
    def test_command_p_domain_correct(self):
        #create a calculator
        calc = minidc()
        #push a 4 onto the stack
        calc.push_number(4)
        #redirect stdout to something we can read
        stdout_temp = sys.stdout
        out = StringIO.StringIO()
        sys.stdout = out
        try:
            #run the p command
            calc.command_p()
            #get the value printed
            printed = out.getvalue()
        finally:
            #restore stdout
            sys.stdout = stdout_temp
        #assert that the stack length hasn't changed
        self.assertEqual(len(calc.nums), 1)
        #assert that the value printed is the values pushed
        self.assertEqual(printed, "4\n")
Here’s the test failing:
    test_add_domain_correct (__main__.test_minidc) ... ok
    test_command_p_domain_correct (__main__.test_minidc) ... FAIL
    test_divide_domain_correct (__main__.test_minidc) ... ok
    test_multiply_domain_correct (__main__.test_minidc) ... ok
    test_push_number_domain_correct (__main__.test_minidc) ... ok
    test_subtract_domain_correct (__main__.test_minidc) ... ok
    =================================================================
    FAIL: test_command_p_domain_correct (__main__.test_minidc)
    -----------------------------------------------------------------
    Traceback (most recent call last):
      File "C:\Users\Alex\PycharmProjects\minidc\test_minidc.py", line 101, in test_command_p_domain_correct
        self.assertEqual(printed, "4\n")
    AssertionError: '' != '4\n'
    -----------------------------------------------------------------
    Ran 6 tests in 0.001s
    FAILED (failures=1)
    Process finished with exit code 0
Here’s the code that passes the test:
    #peeks at the top number on the stack and prints it out
    def command_p(self):
        #pop the top number off the stack
        topnum = self.nums.pop()
        #push it back onto the stack
        self.nums.append(topnum)
        #print the number to stdout, stripping trailing zeroes
        print '{0:g}'.format(float(topnum))
Here’s the test passing:
    test_add_domain_correct (__main__.test_minidc) ... ok
    test_command_p_domain_correct (__main__.test_minidc) ... ok
    test_divide_domain_correct (__main__.test_minidc) ... ok
    test_multiply_domain_correct (__main__.test_minidc) ... ok
    test_push_number_domain_correct (__main__.test_minidc) ... ok
    test_subtract_domain_correct (__main__.test_minidc) ... ok
    -----------------------------------------------------------------
    Ran 6 tests in 0.001s
    OK
    Process finished with exit code 0
