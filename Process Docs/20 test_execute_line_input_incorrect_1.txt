Here's the failing test:
	#test to make sure improper commands are caught
    def test_execute_line_input_incorrect_1(self):
        #create a calculator
        calc = minidc()
        #redirect stderr to something we can read
        stderr_temp = sys.stdout
        out = StringIO.StringIO()
        sys.stderr = out

        try:
            #run a command (including command_f, command_p and command_n
            try:
                calc.execute_line('3 4phy')
            except Exception:
                pass
            #get the value printed
            printed = out.getvalue()
        finally:
            #restore stderr
            sys.stderr = stderr_temp
        self.assertEqual(printed, 'Error: \'h\': Not a valid operation\n')
Here's the test failing:
	test_add_domain_correct (__main__.test_minidc) ... ok
	test_add_domain_incorrect (__main__.test_minidc) ... ok
	test_command_f_domain_correct (__main__.test_minidc) ... ok
	test_command_f_domain_incorrect (__main__.test_minidc) ... ok
	test_command_n_domain_correct (__main__.test_minidc) ... ok
	test_command_n_domain_incorrect (__main__.test_minidc) ... ok
	test_command_p_domain_correct (__main__.test_minidc) ... ok
	test_command_p_domain_incorrect (__main__.test_minidc) ... ok
	test_divide_domain_correct (__main__.test_minidc) ... ok
	test_divide_domain_incorrect_1 (__main__.test_minidc) ... ok
	test_divide_domain_incorrect_2 (__main__.test_minidc) ... ok
	test_execute_line_input_correct_1 (__main__.test_minidc) ... ok
	test_execute_line_input_correct_2 (__main__.test_minidc) ... ok
	test_execute_line_input_correct_3 (__main__.test_minidc) ... ok
	test_execute_line_input_incorrect_1 (__main__.test_minidc) ... FAIL
	test_multiply_domain_correct (__main__.test_minidc) ... ok
	test_multiply_domain_incorrect (__main__.test_minidc) ... ok
	test_push_number_domain_correct (__main__.test_minidc) ... ok
	test_subtract_domain_correct (__main__.test_minidc) ... ok
	test_subtract_domain_incorrect (__main__.test_minidc) ... ok
	======================================================================
	FAIL: test_execute_line_input_incorrect (__main__.test_minidc)
	----------------------------------------------------------------------
	Traceback (most recent call last):
	  File "/home/alex/Programming/softengprac/test_minidc.py", line 390, in test_execute_line_input_incorrect
	    self.assertEqual(printed, 'Error: \'h\': Not a valid operation\n')
	AssertionError: '' != "Error: 'h': Not a valid operation\n"
	----------------------------------------------------------------------
	Ran 20 tests in 0.003s
	FAILED (failures=1)
Here's the code that passes the test:
	# take a line of commands and execute them
    def execute_line(self, line):
        #small function to check if a string is a number (int or float)
        def is_number(s):
            try:
                float(s)
            except ValueError:
                return False
            return True

        #split the line based on the expressions that constitute numbers and commands
        splitline = filter(lambda x: x.strip(), re.split("(\s|\+|\-|\*|/|_?\d*\.?\d+|[a-zA-Z]|_\.|_)", line))
        for i in splitline:
            if i == '+':
                self.add()
            elif i == '-':
                self.subtract()
            elif i == '*':
                self.multiply()
            elif i == '/':
                self.divide()
            elif i == 'n':
                self.command_n()
            elif i == 'f':
                self.command_f()
            elif i == 'p':
                self.command_p()
            elif i[0] == '_' and is_number(i[1:]):
                self.push_number(float('-' + i[1:]))
            elif is_number(i):
                self.push_number(float(i))
            #special cases that result in 0
            elif i == '_' or i == '_.':
                self.push_number(0)
            else:
                sys.stderr.write('Error: \'' + i + '\': Not a valid operation\n')
                raise Exception
Here's the test passing:
	test_add_domain_correct (__main__.test_minidc) ... ok
	test_add_domain_incorrect (__main__.test_minidc) ... ok
	test_command_f_domain_correct (__main__.test_minidc) ... ok
	test_command_f_domain_incorrect (__main__.test_minidc) ... ok
	test_command_n_domain_correct (__main__.test_minidc) ... ok
	test_command_n_domain_incorrect (__main__.test_minidc) ... ok
	test_command_p_domain_correct (__main__.test_minidc) ... ok
	test_command_p_domain_incorrect (__main__.test_minidc) ... ok
	test_divide_domain_correct (__main__.test_minidc) ... ok
	test_divide_domain_incorrect_1 (__main__.test_minidc) ... ok
	test_divide_domain_incorrect_2 (__main__.test_minidc) ... ok
	test_execute_line_input_correct_1 (__main__.test_minidc) ... ok
	test_execute_line_input_correct_2 (__main__.test_minidc) ... ok
	test_execute_line_input_correct_3 (__main__.test_minidc) ... ok
	test_execute_line_input_incorrect_1 (__main__.test_minidc) ... ok
	test_multiply_domain_correct (__main__.test_minidc) ... ok
	test_multiply_domain_incorrect (__main__.test_minidc) ... ok
	test_push_number_domain_correct (__main__.test_minidc) ... ok
	test_subtract_domain_correct (__main__.test_minidc) ... ok
	test_subtract_domain_incorrect (__main__.test_minidc) ... ok
	----------------------------------------------------------------------
	Ran 20 tests in 0.003s
	OK
